<style>
#pool h3 {
  padding: 0px;
  margin: 0px;
} 
#deck {
}
#deck .card,
#pool .card {
  position: absolute;
  height: 110px;
  width: 110px;
} 
#deck .cardWraper,
#pool .cardWraper {
  margin: 5px;
  width: 110px;
  height: 132px;
  position: relative;
  display: inline-block;
  vertical-align: top;
  z-index: 50;
} 
#deck .cardWraper:hover,
#pool .cardWraper:hover {
  z-index: 100;
}

.cardWraper .text-center {
  position: absolute;
  bottom: 0px;
  width: 100%;
}

#pool .cardPrewievWrap,
#deck .cardPrewievWrap {
  display: none;
  min-height: 100px;
}
#pool .cardWraper:hover .cardPrewievWrap,
#deck .cardWraper:hover .cardPrewievWrap {
  display: block;
}
#pool .cardPrewievWrap {
  left:115px;
}
#deck .cardPrewievWrap {
  right:115px;
}

#pool .cardWraper .cardPrewievWrap h3,
#deck .cardWraper .cardPrewievWrap h3 {
  font-size: 1.3em;
  line-height: 1.3em;
}
#pool .cardWraper .cardPrewievWrap hr,
#deck .cardWraper .cardPrewievWrap hr {
  margin: 5px;
}
#pool .icon ,
#deck .icon {
  line-height: 25px;
}

</style>
<link href="/public/css/project.css" rel="stylesheet">
<link href="/public/css/projectTable.css" rel="stylesheet">
<h1>Constructor</h1>
<div class="row">
  <div class="col-md-12">
      <h3>Search</h3>
      <form id="search">

<div class="row">
  <div class="col-md-3">
        <div class="form-group">
          <label for="exampleInputEmail1">Type</label>
          <div class="btn-group btn-group-justified" role="group" aria-label="...">
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-default sButton btn-primary" sType="type" sValue="N">Nin</button>
            </div>
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-default sButton btn-primary" sType="type" sValue="J">Jut</button>
            </div>
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-default sButton btn-primary" sType="type" sValue="M">Mis</button>
            </div>
          </div>
        </div>
  </div>
  <div class="col-md-3">
        <div class="form-group">
          <label for="exampleInputEmail1">ELement</label>
          <div class="btn-group btn-group-justified" role="group" aria-label="...">
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-default sButton btn-primary" sType="element" sValue="L">L</button>
            </div>
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-default sButton btn-primary" sType="element" sValue="F">F</button>
            </div>
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-default sButton btn-primary" sType="element" sValue="W">W</button>
            </div>
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-default sButton btn-primary" sType="element" sValue="E">E</button>
            </div>
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-default sButton btn-primary" sType="element" sValue="A">A</button>
            </div>
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-default sButton btn-primary" sType="element" sValue="V">V</button>
            </div>
          </div>
        </div>
  </div>
  <div class="col-md-3">
        <div class="form-group">
          <label for="sText">Text</label>
          <input type="email" class="form-control sButton" id="sText" placeholder="Text" sType="text">
        </div>
  </div>
  <div class="col-md-1">
              <label for="exampleInputEmail1">Entrance</label>
              <select class="form-control sButton" sType="entrance">
                <option>-</option>
                <option>0</option>
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
                <option>6</option>
                <option>7</option>
                <option>8</option>
                <option>9</option>
              </select>
  </div>
  <div class="col-md-1">
              <label for="exampleInputEmail1">Hand</label>
              <select class="form-control sButton" sType="handcost">
                <option>-</option>
                <option>0</option>
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
                <option>6</option>
                <option>7</option>
                <option>8</option>
                <option>9</option>
              </select>
  </div>
  <div class="col-md-1">
              <label for="exampleInputEmail1">Chackra</label>
              <select class="form-control sButton" sType="chackra">
                <option>-</option>
                <option>0</option>
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
                <option>6</option>
                <option>7</option>
                <option>8</option>
                <option>9</option>
              </select>

  </div>

      </form>
  </div>
</div>
</div>
<div class="row">
  <div class="col-md-4">
      <h3>Pool</h3>
  </div>
  <div class="col-md-2">
      <h3>Deck</h3>
  </div>
  <div class="col-md-6"><h3>
    <div class="input-group">
      <input type="text" class="form-control" value="New Deck" id="deckName">
      <span class="input-group-btn">
        <button class="btn btn-default" type="button" onclick="ajaxDeck('save')"><span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span></button>
        <button class="btn btn-default" type="button" onclick="ajaxDeck('delete')"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
          <span class="caret"></span>
          <span class="sr-only">Toggle Dropdown</span>
        </button>
        <ul id="deckskList" class="dropdown-menu dropdown-menu-right" role="menu">
        </ul>
      </span>
    </div></h3>
  </div>
</div>
<div class="row">
  <div class="col-md-4">
      <div id="pool"></div>
  </div>
  <div class="col-md-8">
      <div id="deck"></div>
  </div>
</div>
<script>
var module = false;
</script>
<script src="/socket.io/socket.io.js"></script>
<script src="/public/js/G/cardBase.js"></script>
<script src="/public/js/G/card.js"></script>
<script src="/public/js/G/Actions.js"></script>
<script src="/public/js/jquery.js"></script>
<script>



var curentDeck = {};

var $search = $('#search');
$search.bind( "click keyup", function(e) { 
  var button = $(e.target);
  if(e.type == 'click') {
    if (button.hasClass('sButton')) {

      var sType = button.attr('sType');
      var args = {};

      if (sType == 'type' || sType == 'element') {
        var sValue = button.attr('sValue');
        if (button.hasClass('btn-primary')) {
          button.removeClass('btn-primary');        
          args[sValue] = false;
        }
        else {
          button.addClass('btn-primary');
          args[sValue] = true;
        }
        updateSearch(args)
      }
      if (sType == 'entrance' || sType == 'handcost' || sType == 'chackra') {     
        args[sType] = button.val();
        updateSearch(args)
      }
    }
  }
  if (e.type == 'keyup' && button.hasClass('sButton') && button.attr('sType') === 'text') {  
        updateSearch({'text':button.val()})
  }
});


var $pool = $('#pool');
$pool.bind( "click", function(e) { 
  var button = $(e.target);
  if(e.type == 'click') {
    if (button.hasClass('sButtonPlus')) {
      updateDeck('plus',button.attr('sValue'));
    }
    if (button.hasClass('sButtonMinus')) {
      updateDeck('minus',button.attr('sValue'));
    }
  }
});


var $deck = $('#deck');
$deck.bind( "click", function(e) { 
  var button = $(e.target);
  if(e.type == 'click') {
    if (button.hasClass('sButtonPlus')) {
      updateDeck('plus',button.attr('sValue'));
    }
    if (button.hasClass('sButtonMinus')) {
      updateDeck('minus',button.attr('sValue'));
    }
  }
});

var updateDeck = (function(){
  var deck;

  var clearDeck = function() {
    deck = {
      N : {},
      J : {},
      M : {},
    }
    for (var i = 0; i<=9; i++) {
      deck.N['cost'+i+''] = {};
    }
  }
  clearDeck();

  var row = function(link) {
      for (var c in link) {
        for (var k = 1; k<=link[c]; k++) {
          $div = createCard(c);
          $deck.append($div);
        }
      }
  }

  var mainFunc = function (act, id) {
    if (act === 'plus' || act === 'minus') {
      var link;
      if (CardBase[id].type == 'N') {
        link = deck.N['cost'+CardBase[id].ec];
      }
      else {
        link = deck[CardBase[id].type]
      }

      if (act === 'plus') {
        if (link.hasOwnProperty(id)) {
          if (link[id] < 3) {
            link[id]++;
          }
        }
        else {
          link[id] = 1;
        }
      }

      if (act === 'minus') {
        if (link.hasOwnProperty(id)) {
          link[id]--;
          if (link[id] == 0) {
            delete link[id];
          }
        }
      }
    }

    if (act === 'select') {
      clearDeck();
      for (var i in id) {
        if (i === 'N') {
          for (var j in id.N) {
            for (var k in id.N[j])
            deck.N[j][k] = id.N[j][k];
          }
        }
        else {
          for (var j in id[i]) {
            deck[i][j] = id[i][j];
          } 
        }
      }
    }

    if (act === 'delete') {
      clearDeck();
    }


    $deck.empty();
    var count = 0;
    for (var n in deck.N) {
      for (var i in deck.N[n]) {
        $deck.append('<div></div>');
        break;
      }
      row(deck.N[n]);
    }
    for (var i in deck.J) {
      $deck.append('<div></div>');
      break;
    }
    row(deck.J);

    for (var i in deck.M) {
      $deck.append('<div></div>');
      break;
    }
    row(deck.M);


  }

  mainFunc.getDeck = function() {
    return deck;
  }

  return mainFunc;
})()

var updateSearch = (function(){
  var current = {
    type : ['J','N','M'],
    element : ['L','F','W','A','E','V'],
    text : '',
    handcost : '-',
    entrance : '-',
    chackra : '-'
  };
  return function(args) {
    var isChange = false;
    for (var i in args) {
      if (i === 'J' || i === 'N' || i === 'M'){
        var ind = current.type.indexOf(i);
        if (args[i] && !~ind) {
          current.type.push(i);
          isChange = true;
        }
        if (!args[i] && ~ind) {
          current.type.splice(ind, 1);
          isChange = true;
        }
      }

      if (i === 'L' || i === 'F' || i === 'W' || i === 'A' || i === 'E' || i === 'V') {
        var ind = current.element.indexOf(i);
        if (args[i] && !~ind) {
          current.element.push(i);
          isChange = true;
        }
        if (!args[i] && ~ind) {
          current.element.splice(ind, 1);
          isChange = true;
        }
      }

      if (i === 'entrance' || i === 'handcost' || i === 'chackra') {     
        if (current[i] !== args[i]) {
          isChange = true;
          current[i] = args[i];
        }
      }

      if (i === 'text') {     
        if (current[i] !== args[i]) {
          isChange = true;
          current[i] = args[i];
        }
      }

    }
    var arg = {};
    for (var i in current) {
      arg[i] = current[i];
    }


    if (isChange) {
      args.command == 'new'
    }
    updatePool(arg)
  }
})();

var updatePool = (function() {
  var shown = 0;
  return function(args) {

    var command = args.command || 'add';
    var type    = args.type    || ['J','N','M'];
    var element = args.element || ['L','F','W','A','E','V'];
    var text    = args.text    || '';
    var handcost = args.handcost || '-';
    var entrance = args.entrance || '-';
    var chackra  = args.chackra || '-';
    var shown    = args.shown || 0;

    $pool.empty();
    if (command == 'empty') {
      shown = 0;
      return;
    }
    var count = 0;
    var newShown = shown + 12;
    var existMoreCheck = false;
    var existMore = false;
    for (var i in CardBase) {
      if (existMoreCheck) {
        existMore = true;
        break;
      }
      var isPrint = false;
      if (type.length != 0) {
        if (!~type.indexOf(CardBase[i].type)) {
          continue;
        }
      }
      if (element.length != 0) {
        for (var k in CardBase[i].elements) {
          if (~element.indexOf(CardBase[i].elements[k])) {
            isPrint = true;
          }
        }
      }

      if (text.length != 0) {
        if (!~CardBase[i].name.indexOf(text)) {
          continue;
        }
      }

      if (entrance !== '-' && (CardBase[i].type == 'N' || CardBase[i].type == 'M' || CardBase[i].type == 'C')){
        if (CardBase[i].ec+'' !== entrance ) {
          continue;
        }
      }
      if (handcost !== '-' && (CardBase[i].type == 'N' || CardBase[i].type == 'M' || CardBase[i].type == 'C')){
        if (CardBase[i].hc+'' !=handcost) {
          continue;
        }
      }
      if (chackra !== '-' && CardBase[i].type == 'J'){
        var exist = false;
        existBreak:
        for (var j in CardBase[i].cost) {
            if (CardBase[i].cost[j].length + '' ==  chackra) {
              exist = true;
              break existBreak;
            }
        }
        if (!exist) {
          continue;
        }
      }

      if (isPrint) {

        $div =  createCard(i);
        $pool.append($div);
        count++;
      }
      if (count >= newShown) {
        existMoreCheck = true;
      }
    }
    if (existMore) {
      var $pp = $('<p />');
      var $bp = $('<button />', {
        'class': 'btn btn-default btn-lg btn-block',
        'text': 'More',
        'click': function() {
          updatePool({
            command : command,
            type : type,
            element : element,
            text : text,
            handcost : handcost,
            entrance : entrance,
            chackra : chackra,
            shown : newShown
          })
        }
      });
      $pp.append($bp);
      $pool.append($pp);
    }
  }
})()

function createCard(i) {

        var $div = $('<div />',{class:'cardWraper'});
        var $card = $('<div />',{class:'card'});
        var $prew = $('<div />', {class:'cardPrewievWrap'})
        $div.append($card);
        // $card.append(Card.prototype.prewievContentHeader({name:CardBase[i].name,ec:CardBase[i].ec,hc:CardBase[i].hc,headerSize:4}));


        $prew.append( Card.prototype.prewievContent( {known:CardBase[i]} ) );

        var cardParams = {
          type : CardBase[i].type,
          faceUp: true,
          currentPower: {attack: 0, support: 0},
          mouseControle: 'mouseControle full',
          elements : CardBase[i].elements,
          img : CardBase[i].img,
          isHealt : true,
          W : 100,
          ai : CardBase[i].ai,
          si : CardBase[i].si,
          hc : CardBase[i].hc,
          ec : CardBase[i].ec,
          cost : CardBase[i].cost,
        }

        cardParams.permanent = 0;
        if (CardBase[i].effect.permanent) {
          cardParams.permanent = CardBase[i].effect.permanent;
        }

        Card.prototype.fillAsFaceUp($card, cardParams)

        var $p = $('<div />',{'class':'text-center'});
        $p.append(
          $('<button />',{class:'btn btn-default btn-xs sButtonPlus', sValue:i})
          .append($('<span />',{class:'sButtonPlus glyphicon glyphicon-plus', sValue:i})))
        $p.append(
          $('<button />',{class:'btn btn-default btn-xs sButtonMinus', sValue:i})
          .append($('<span />',{class:'sButtonMinus glyphicon glyphicon-minus',sValue:i})))
        $div.append($p);
        $div.append($prew);
        return $div;
}


var updateDecks = (function () {
  var $deckName = $('#deckName');
  var $deckskList = $('#deckskList');
  var decks = <%- JSON.stringify(decks) %> ;
  var selectDeck = function(name, deck) {
    $deckName.val(decodeURIComponent(name));
    updateDeck('select',deck)
  }
  return function(act, data) {
    if (act == 'add') {
      decks[data.name] = data.deck;
    }
    if (act == 'delete') {
      delete decks[encodeURIComponent(data.name)];
      updateDeck('delete', null);
    }
    $deckskList.empty();
    for (var i in decks) {
      var $a = $('<a />', {
        'href': '#',
        'text':  decodeURIComponent(i),
        'click': function() {
          var deckName = i;
          var deckDeck = decks[i];
          return function() {
              selectDeck(deckName, deckDeck)
          }
        }()
      });
      var $li = $('<li />');
      $li.append($a);
      $deckskList.append($li);
    }
  }
})()
updateDecks();

function ajaxDeck(act) {
  var deckToSave = updateDeck.getDeck();
  var $deckName = $('#deckName');
  var data = {
      name: $deckName.val(),
      'deck': deckToSave,
      act : act
    };
  if (act === 'save') {
    updateDecks('add', data);
  }
  if (act === 'delete') {
    updateDecks('delete', data);
  }
  $.ajax({
    type: "POST",
    url: '/ajaxDeck',
    data: data,
    success: function() {
      alert('success')
    },
    dataType: 'json'
  });
}
</script>
